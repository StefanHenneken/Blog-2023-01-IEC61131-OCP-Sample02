<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SequenceManager" Id="{b3349562-6451-4a65-8972-416ee33608fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_SequenceManager
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// backing variable
	_aSequence	: ARRAY [1..5] OF ST_SequenceItem := [(nId := 1, nValue := 50, nDuration := 20),
													  (nId := 2, nValue := 10, nDuration := 30),
													  (nId := 3, nValue := 23, nDuration := 10),
													  (nId := 4, nValue := 65, nDuration := 200),
													  (nId := 5, nValue := 45, nDuration := 75)];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="aSequence" Id="{5b7362bd-d614-4af5-99b1-698052d266ff}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY PUBLIC aSequence : ARRAY [1..5] OF ST_SequenceItem]]></Declaration>
      <Get Name="Get" Id="{974184b9-9aba-4eea-948b-dd8bad63a7a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[aSequence := _aSequence;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fac1f305-beff-4e78-94ce-5c38c4e3d5df}">
        <Declaration><![CDATA[PROTECTED 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_aSequence := aSequence;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Sort" Id="{f7650777-654f-40a3-bdab-c28c2caedab2}">
      <Declaration><![CDATA[METHOD PUBLIC Sort
VAR_INPUT
	eSortedOrder		: E_SortedOrder;
	eSortedDirection	: E_SortedDirection;
END_VAR
VAR
	stLeft, stRight		: ST_SequenceItem;
	nMax, nIndex		: DINT;
	bSwapped			: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSortedDirection OF
	E_SortedDirection.Ascending:
		CASE eSortedOrder OF
			E_SortedOrder.Id:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nId > stRight.nId) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		
			E_SortedOrder.Value:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nValue > stRight.nValue) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		
			E_SortedOrder.Duration:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nDuration > stRight.nDuration) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		END_CASE

	E_SortedDirection.Descending:
		CASE eSortedOrder OF
			E_SortedOrder.Id:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nId < stRight.nId) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		
			E_SortedOrder.Value:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nValue < stRight.nValue) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		
			E_SortedOrder.Duration:
				REPEAT
					bSwapped := FALSE;
					FOR nIndex := 1 TO 4 DO
						stLeft := THIS^._aSequence[nIndex];
						stRight := THIS^._aSequence[nIndex + 1];
						IF (stLeft.nDuration < stRight.nDuration) THEN
							THIS^._aSequence[nIndex + 1] := stLeft;
							THIS^._aSequence[nIndex] := stRight;
							bSwapped := TRUE;
						END_IF
					END_FOR
				UNTIL
					bSwapped = FALSE
				END_REPEAT;
		END_CASE
END_CASE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>